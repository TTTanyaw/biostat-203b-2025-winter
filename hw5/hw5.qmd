---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 20 @ 11:59PM
author: "Tanya Wang, 605587605"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 


### Question 1
Data preprocessing and feature engineering.


**Solution:**

Load the dataset and convert categorical variables to factor:
```{r}
library(tidyverse)
library(caret)
library(data.table)

mimic_icu_cohort <- 
  readRDS("~/203b-hw/hw4/mimiciv_shiny/mimic_icu_cohort.rds") |>
  filter(!is.na(los_long)) |>
  select(-los, -last_careunit, -dod, -discharge_location, 
         -hospital_expire_flag, -intime, -outtime, -admittime, -dischtime, 
         -deathtime, -edregtime, -edouttime, -admit_provider_id, -anchor_year, 
         -anchor_age, -anchor_year_group) |>
  mutate(across(
    c(los_long,
      insurance, 
      language, 
      marital_status, 
      gender), as.factor))

colnames(mimic_icu_cohort)
```


```{r}
str(mimic_icu_cohort)
```


```{r}
library(ggplot2)
library(gridExtra)

# Select only continuous variables
continuous_vars <- mimic_icu_cohort |>
  select(
    bicarbonate, chloride, creatinine, glucose, potassium, sodium, 
    hematocrit, wbc, heart_rate, 
    non_invasive_blood_pressure_diastolic, 
    non_invasive_blood_pressure_systolic, 
    respiratory_rate, temperature_fahrenheit, age_intime
  )

plot_list <- list()

for (var in colnames(continuous_vars)) {
  p <- ggplot(mimic_icu_cohort, aes_string(x = var)) +
    geom_density(fill = "blue", alpha = 0.5, na.rm = TRUE) +
    labs(title = var, x = "Value", y = "Density") +
    theme_minimal() +
    theme(plot.title = element_text(hjust = 0.1, face = "bold", size = 8))
  
  plot_list[[var]] <- p
}

grid.arrange(grobs = plot_list, ncol = 4)
```



Handle missing values (for continuous variables,  handle skewed data with median imputation and normally distributed data with mean imputation, and for categorical variables, replace missing values with the mode):
```{r}
library(moments)

skewness_values <- sapply(mimic_icu_cohort, 
                          function(x) 
                            if(is.numeric(x)) 
                              skewness(x, na.rm = TRUE) 
                            else 
                              NA)

# Impute with median
skewed_vars <- names(skewness_values[abs(skewness_values) > 0.5])
# Impute with mean
normal_vars <- names(skewness_values[abs(skewness_values) <= 0.5])

impute_missing <- function(df) {
  for (col in colnames(df)) {
    if (is.numeric(df[[col]])) {
      if (col %in% skewed_vars) {
        df[[col]][is.na(df[[col]])] <- 
          median(df[[col]], na.rm = TRUE)  # Median for skewed data
      } else {
        df[[col]][is.na(df[[col]])] <- 
          mean(df[[col]], na.rm = TRUE)  # Mean for normal data
      }
    } else {
      # Impute categorical variables with mode
      df[[col]][is.na(df[[col]])] <- 
        as.character(names(sort(table(df[[col]]), decreasing = TRUE))[1])
    }
  }
  return(df)
}

mimic_icu_cohort <- impute_missing(mimic_icu_cohort)

colSums(is.na(mimic_icu_cohort))
```



### Quetion 2
Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.
```{r,eval=FALSE}
#| eval: false
set.seed(203)

# sort
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

data_split <- initial_split(
  mimiciv_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )
```


**Solution:**
```{r}
library(tidymodels)

set.seed(203)

# Sort dataset by subject_id, hadm_id, stay_id
mimic_icu_cohort <- mimic_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

# Split the dataset
data_split <- initial_split(
  mimic_icu_cohort, 
  strata = "los_long",
  prop = 0.5
)

train_data <- training(data_split) |>
  select(-subject_id, -hadm_id, -stay_id)

test_data <- testing(data_split) |>
  select(-subject_id, -hadm_id, -stay_id)

dim(train_data)
dim(test_data)
```


### Question 3
Train and tune the models using the training set.

#### Logistic regression (with enet regularization)

```{r}
logit_recipe <- recipe(
  los_long ~ ., 
  data = train_data
  ) |>
  step_dummy(all_nominal_predictors()) |>
  step_zv(all_numeric_predictors()) |>
  step_normalize(all_numeric_predictors()) |>
  print()
```

```{r}
logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = FALSE) |>
  print()
```

```{r}
logit_wf <- workflow() |>
  add_recipe(logit_recipe) |>
  add_model(logit_mod) |>
  print()
```

```{r}
param_grid <- grid_regular(
  penalty(range = c(-6, 3)), 
  mixture(),
  levels = c(5, 5)
  ) |>
  print()
```

Set cross-validation partitions.
```{r}
set.seed(203)

folds <- vfold_cv(train_data, v = 5)
folds
```

Fit cross-validation.
```{r}
library(glmnet)

(logit_fit <- logit_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )) |>
  system.time()

logit_fit
```

Visualize CV results:
```{r}
logit_fit |>
  # aggregate metrics from K folds
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV AUC") +
  scale_x_log10()
```

Show the top 5 models.
```{r}
logit_fit |>
  show_best(metric = "roc_auc")
```

Select the best model.
```{r}
best_logit <- logit_fit |>
  select_best(metric = "roc_auc")
best_logit
```

Fit this final model to the whole training data and use test data to estimate the model performance.
```{r}
# Final workflow
final_wf_logit <- logit_wf |>
  finalize_workflow(best_logit)
final_wf_logit
```

```{r}
# Fit the whole training set, then predict the test cases
final_fit_logit <- 
  final_wf_logit |>
  last_fit(data_split)
final_fit_logit
```


```{r}
# Test metrics
final_fit_logit |> 
  collect_metrics()
```


#### Random Forest

```{r}
rf_recipe <- 
  recipe(
    los_long ~ ., 
    data = train_data
  ) |>
  step_zv(all_numeric_predictors())
```

```{r}
rf_mod <- 
  rand_forest(
    mode = "classification",
    # Number of predictors randomly sampled in each split
    mtry = tune(),
    # Number of trees in ensemble
    trees = tune()
  ) |> 
  set_engine("ranger", importance = "impurity")
rf_mod
```

```{r}
rf_wf <- workflow() |>
  add_recipe(rf_recipe) |>
  add_model(rf_mod)
rf_wf
```

```{r}
param_grid <- grid_regular(
  trees(range = c(100L, 500L)), 
  mtry(range = c(1L, 5L)),
  levels = c(5, 5)
  )
param_grid
```

Set cross-validation partitions.
```{r}
set.seed(203)

folds <- vfold_cv(train_data, v = 5)
folds
```

Fit cross-validation.
```{r}
library(ranger)

rf_fit <- rf_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
rf_fit
```

Visualize CV results:
```{r}
rf_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = trees, y = mean, color = factor(mtry))) +
  geom_point() + 
  # geom_line() + 
  labs(x = "Num. of Trees", y = "CV AUC")
```

Show the top 5 models.
```{r}
rf_fit |>
  show_best(metric = "roc_auc")
```

Select the best model.
```{r}
best_rf <- rf_fit |>
  select_best(metric = "roc_auc")
best_rf
```

```{r}
# Final workflow
final_wf_rf <- rf_wf |>
  finalize_workflow(best_rf)
final_wf_rf
```

```{r}
# Fit the whole training set, then predict the test cases
final_fit_rf <- 
  final_wf_rf |>
  last_fit(data_split)
final_fit_rf
```

```{r}
# Test metrics
final_fit_rf |> 
  collect_metrics()
```


#### XGBoost

```{r}
library(xgboost)

gb_recipe <- 
  recipe(
    los_long ~ ., 
    data = train_data
  ) |>
  step_dummy(all_nominal_predictors()) |>
  step_zv(all_numeric_predictors()) |> 
  print()
```

```{r}
gb_mod <- 
  boost_tree(
    mode = "classification",
    trees = 500, 
    tree_depth = tune(),
    learn_rate = tune()
  ) |> 
  set_engine("xgboost")
gb_mod
```

```{r}
gb_wf <- workflow() |>
  add_recipe(gb_recipe) |>
  add_model(gb_mod)
gb_wf
```

```{r}
param_grid <- grid_regular(
  tree_depth(range = c(3L, 10L)),
  learn_rate(range = c(-3, 2), trans = log10_trans()),
  levels = c(3, 10)
  )
param_grid
```

Set cross-validation partitions.
```{r}
set.seed(203)

folds <- vfold_cv(train_data, v = 5)
folds
```

Fit cross-validation.
```{r}
gb_fit <- gb_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
gb_fit
```

Visualize CV results:
```{r}
gb_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = learn_rate, y = mean, color = factor(tree_depth))) +
  geom_point() +
  labs(x = "Learning Rate", y = "CV AUC") +
  scale_x_log10()
```

Show the top 5 models.
```{r}
gb_fit |>
  show_best(metric = "roc_auc")
```

Select the best model.
```{r}
best_gb <- gb_fit |>
  select_best(metric = "roc_auc")
best_gb
```

```{r}
# Final workflow
final_wf_gb <- gb_wf |>
  finalize_workflow(best_gb)
final_wf_gb
```

```{r}
# Fit the whole training set, then predict the test cases
final_fit_gb <- 
  final_wf_gb |>
  last_fit(data_split)
final_fit_gb
```

```{r}
# Test metrics
final_fit_gb |> 
  collect_metrics()
```



#### Model Stacking

```{r}
library(stacks)
library(keras)
library(kernlab)

ms_recipe <- 
  recipe(
    los_long ~ ., 
    data = train_data
  ) |>
  step_dummy(all_nominal_predictors()) |>
  step_zv(all_predictors())
ms_recipe
```

```{r}
set.seed(203)
folds <- vfold_cv(train_data, v = 5)
```


##### Logistic Regression
```{r}
logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = TRUE)
logit_mod
```

```{r}
logit_wf <- workflow() |>
  add_recipe(ms_recipe) |>
  add_model(logit_mod)
logit_wf
```

```{r}
logit_grid <- grid_regular(
  penalty(range = c(-6, 3)), 
  mixture(),
  levels = c(5, 5)
  )

logit_res <- 
  tune_grid(
    object = logit_wf, 
    resamples = folds, 
    grid = logit_grid,
    control = control_stack_grid()
  )
logit_res
```


##### Random forest
```{r}
rf_mod <- 
  rand_forest(
    mode = "classification",
    # Number of predictors randomly sampled in each split
    mtry = tune(),
    # Number of trees in ensemble
    trees = tune()
  ) |>
  set_engine("ranger")
rf_mod
```

```{r}
rf_wf <- workflow() |>
  add_recipe(ms_recipe) |>
  add_model(rf_mod)
rf_wf
```

```{r}
rf_grid <- grid_regular(
  trees(range = c(100L, 500L)), 
  mtry(range = c(1L, 5L)),
  levels = c(2, 5)
  )

rf_res <- 
  tune_grid(
    object = rf_wf, 
    resamples = folds, 
    grid = rf_grid,
    control = control_stack_grid()
  )
rf_res
```


##### XGBoost
```{r}
gb_mod <- 
  boost_tree(
    mode = "classification",
    trees = 500, 
    tree_depth = tune(),
    learn_rate = tune()
  ) |> 
  set_engine("xgboost")
gb_mod
```

```{r}
gb_wf <- workflow() |>
  add_recipe(ms_recipe) |>
  add_model(gb_mod)
gb_wf
```

```{r}
gb_grid <- grid_regular(
  tree_depth(range = c(3L, 10L)),
  learn_rate(range = c(-3, 2), trans = log10_trans()),
  levels = c(2, 5)
  )

gb_res <- 
  tune_grid(
    object = gb_wf, 
    resamples = folds, 
    grid = gb_grid,
    control = control_stack_grid()
  )
gb_res
```


##### Model stacking

```{r}
mimic_model_st <- 
  # initialize the stack
  stacks() |>
  # add candidate members
  add_candidates(logit_res) |>
  add_candidates(rf_res) |>
  add_candidates(gb_res) |>
  # determine how to combine their predictions
  blend_predictions(
    penalty = 10^(-6:2),
    metrics = c("roc_auc")
    ) |>
  # fit the candidates with nonzero stacking coefficients
  fit_members()
```

```{r}
mimic_model_st
```

```{r}
autoplot(mimic_model_st)
```

```{r}
autoplot(mimic_model_st, type = "members")
```

Top results:
```{r}
autoplot(mimic_model_st, type = "weights")
```

```{r}
collect_parameters(mimic_model_st, "rf_res")
```


##### Final Classification

```{r}
pred <- test_data %>%
  bind_cols(predict(mimic_model_st, ., type = "prob")) %>%
  print(width = Inf)
```

```{r}
colnames(pred)

yardstick::roc_auc(
  pred,
  truth = los_long,
  contains(".pred_TRUE")
  )
```

```{r}
pred <-
  test_data |>
  select(los_long) |>
  bind_cols(
    predict(
      mimic_model_st,
      test_data,
      type = "class",
      members = TRUE
      )
    ) |>
  print(width = Inf)
```

```{r}
map(
  colnames(pred),
  ~mean(pred$los_long == pull(pred, .x))
  ) |>
  set_names(colnames(pred)) |>
  as_tibble() |>
  pivot_longer(c(everything(), -los_long))
```



### Question 4
Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?

```{r}
library(yardstick)
library(dplyr)

logit_results <- collect_metrics(final_fit_logit) |>
  filter(.metric %in% c("roc_auc", "accuracy")) |>
  select(.metric, .estimate) |>
  pivot_wider(names_from = .metric, values_from = .estimate) |>
  mutate(model = "Logistic Regression")

rf_results <- collect_metrics(final_fit_rf) |>
  filter(.metric %in% c("roc_auc", "accuracy")) |>
  select(.metric, .estimate) |>
  pivot_wider(names_from = .metric, values_from = .estimate) |>
  mutate(model = "Random Forest")

gb_results <- collect_metrics(final_fit_gb) |>
  filter(.metric %in% c("roc_auc", "accuracy")) |>
  select(.metric, .estimate) |>
  pivot_wider(names_from = .metric, values_from = .estimate) |>
  mutate(model = "XGBoost")

stack_pred_class <- predict(mimic_model_st, new_data = test_data, 
                            type = "class")$.pred_class
stack_pred_class <- factor(stack_pred_class,
                           levels = levels(test_data$los_long))

stack_auc <- yardstick::roc_auc(
    test_data |>
      bind_cols(predict(mimic_model_st,  new_data = test_data, type = "prob")),
    truth = los_long,
    contains(".pred_TRUE")
  )$.estimate

stack_acc <- mean(test_data$los_long == stack_pred_class)

stack_results <- tibble(
  model = "Model Stacking",
  accuracy = stack_acc,
  roc_auc = stack_auc
)

model_performance <- bind_rows(logit_results, 
                               rf_results, 
                               gb_results, 
                               stack_results) |>
  select(model, roc_auc, accuracy)
print(model_performance)
```

According to the results of model performace, Model Stacking performs the best with the highest roc_auc (0.6474) and accuracy (0.6039). XGBoost (0.6399 roc_auc, 0.5997 accuracy) and Random Forest (0.6396 roc_auc, 0.5995 accuracy) perform similarly and better than Logistic Regression. Logistic Regression performs the worst, with roc_auc (0.6051) and accuracy (0.5761). Model stacking leverages strengths of different models, thus improving the performance of model prediction.

XGBoost and Random Forest outperform Logistic Regression, indicating that non-linear relationships are important in predicting ICU stay length. Model Stacking outperforms all models, meaning a combination of multiple models leads to better predictions.

Besides, according to the Model Stacking Weights Plot, Random Forest dominates the stack, which means Random Forest models had the strongest predictive power in the ensemble. Furthermore, a lower penalty (0.001) means the model gives more weight to all members instead of aggressively shrinking coefficients. This suggests that multiple models contributed meaningfully.


Random Forest feature importance:
```{r}
final_rf_fit <- final_wf_rf |>
  fit(train_data)

rf_model <- final_rf_fit |>
  extract_fit_engine()

rf_importance <- ranger::importance(rf_model)

rf_importance_df <- tibble(
  feature = names(rf_importance),
  importance = rf_importance
) |>
  arrange(desc(importance))

ggplot(rf_importance_df[1:5, ], 
       aes(x = reorder(feature, importance), y = importance)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(title = "Top 5 Important Features (Random Forest)", 
       x = "Feature", y = "Importance") +
  theme_minimal()
```

The top 5 most important features are non_invasive_blood_pressure_systolic, Heart rate, Hematocrit, wbc, and non_invasive_blood_pressure_diastolic.







